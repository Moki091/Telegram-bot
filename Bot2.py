import discord
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, ConversationHandler, MessageHandler, Filters
import asyncio
from datetime import datetime, timedelta
import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DISCORD_TOKEN = os.getenv("MTMzODkxMjg1MzU3MDM1NTI0MA.Geegu_.4l83_oK9kKxwAHDdUZyrbwno7gT2WbEevVXhfc")
TELEGRAM_TOKEN = os.getenv("T7831688575:AAFLq01R57y0iFkDABmO8va9FKYeuLOeB4k")
DISCORD_SERVER_ID = int(os.getenv("1317856700828483604"))
DISCORD_CLIENT_ID = os.getenv("1338912853570355240")
DISCORD_CLIENT_SECRET = os.getenv("1LaUj6hHQ1nwcFm30tMIqMvdBPr7U1Ba")
DISCORD_REDIRECT_URI = os.getenv("DISCORD_REDIRECT_URI")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord-–∫–ª–∏–µ–Ω—Ç–∞
intents = discord.Intents.default()
intents.members = True
intents.voice_states = True
intents.presences = True
discord_client = discord.Client(intents=intents)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
voice_time = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (—á–∞—Å—ã)
voice_hours = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–∞—Ö (—á–∞—Å—ã)
game_hours = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
game_start_time = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notifications = set()
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
agreed_users = set()
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
linked_accounts = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
AUTHORIZE, LINK_ACCOUNT = range(2)

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
@discord_client.event
async def on_voice_state_update(member, before, after):
    now = datetime.now()
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª
    if after.channel and (before.channel != after.channel):
        voice_time[member.id] = now
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        if notifications:
            message = f"üîä {member.display_name} –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª {after.channel.name}."
            for chat_id in notifications:
                await send_telegram_message(chat_id, message)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞
    elif before.channel and not after.channel:
        entry_time = voice_time.get(member.id)
        if entry_time:
            delta = now - entry_time
            hours = delta.total_seconds() / 3600
            voice_hours[member.id] = voice_hours.get(member.id, 0) + hours
            voice_time.pop(member.id, None)

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∏–≥—Ä—ã)
@discord_client.event
async def on_member_update(before, after):
    now = datetime.now()
    for activity in after.activities:
        if activity.type == discord.ActivityType.playing:
            if not any(a.type == discord.ActivityType.playing for a in before.activities):
                game_start_time[after.id] = now
                game_hours[after.id] = game_hours.get(after.id, 0)
            break
    else:
        for activity in before.activities:
            if activity.type == discord.ActivityType.playing:
                game_end_time = now
                game_duration = game_end_time - game_start_time.get(after.id, now)
                game_hours[after.id] += game_duration.total_seconds() / 3600
                game_start_time.pop(after.id, None)
                break

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
async def get_voice_channels_info(guild_id):
    guild = discord_client.get_guild(guild_id)
    if not guild:
        return None
    channels_info = []
    for channel in guild.voice_channels:
        members = channel.members
        if members:
            members_data = []
            for member in members:
                entry_time = voice_time.get(member.id)
                duration = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if entry_time:
                    delta = datetime.now() - entry_time
                    hours, remainder = divmod(delta.seconds, 3600)
                    minutes, _ = divmod(remainder, 60)
                    duration = f"{hours}—á {minutes}–º"
                members_data.append({
                    "name": member.display_name,
                    "duration": duration
                })
            channels_info.append({
                "name": channel.name,
                "members": members_data
            })
    return channels_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–∞—Ö
async def get_games_info(guild_id):
    guild = discord_client.get_guild(guild_id)
    if not guild:
        return None
    games = {}
    for member in guild.members:
        for activity in member.activities:
            if activity.type == discord.ActivityType.playing:
                game_name = activity.name
                games[game_name] = games.get(game_name, 0) + 1
    return games

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
async def get_members_info(guild_id):
    guild = discord_client.get_guild(guild_id)
    if not guild:
        return None
    members_info = []
    for member in guild.members:
        members_info.append({
            "name": member.display_name,
            "joined_at": member.joined_at.strftime("%Y-%m-%d %H:%M:%S")
        })
    return members_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_profile(user_id, guild_id):
    guild = discord_client.get_guild(guild_id)
    if not guild:
        return None
    member = guild.get_member(user_id)
    if not member:
        return None
    joined_at = member.joined_at.strftime("%Y-%m-%d %H:%M:%S")
    voice_hrs = round(voice_hours.get(user_id, 0), 2)
    game_hrs = round(game_hours.get(user_id, 0), 2)
    profile_info = {
        "name": member.display_name,
        "joined_at": joined_at,
        "voice_hours": voice_hrs,
        "game_hours": game_hrs
    }
    return profile_info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(chat_id, text, parse_mode=None):
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    bot = updater.bot
    await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è Telegram
def start(update: Update, context: CallbackContext):
    if update.message.chat_id in agreed_users:
        main_menu(update, context)
    else:
        rules_text = """
        üìú *–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:*
        - –ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
        - –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        - –ù–µ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å –≤ —á–∞—Ç–∞—Ö.
        - –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
        
        –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.
        """
        keyboard = [[InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(rules_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
def main_menu(update: Update, context: CallbackContext):
    welcome_text = """
    üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Discord-—Å–µ—Ä–≤–µ—Ä–∞!* üéÆ
    –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
    - –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≤ –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–∞—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏
    - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
    - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ —Å–∞–π—Ç—ã
    """
    update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

    keyboard = [
        [InlineKeyboardButton("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ì–æ–ª–æ—Å–æ–≤–æ–≥–æ –ö–∞–Ω–∞–ª–∞", callback_data='voice')],
        [InlineKeyboardButton("–ò–≥—Ä—ã", callback_data='games')],
        [InlineKeyboardButton("–£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data='members')],
        [InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("–°—Å—ã–ª–∫–∏", callback_data='links')],
        [InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Discord", callback_data='authorize')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    async def handle_request():
        if query.data == 'agree':
            agreed_users.add(query.message.chat_id)
            query.edit_message_text(text="–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            main_menu(update, context)
        elif query.data in ['voice', 'games', 'members', 'notifications', 'profile', 'links', 'authorize']:
            if query.message.chat_id not in agreed_users:
                query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.")
                return

            if query.data == 'voice':
                channels_info = await get_voice_channels_info(DISCORD_SERVER_ID)
                response = "**–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
                for channel in channels_info:
                    response += f"üîä **{channel['name']}**\n"
                    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(channel['members'])}\n"
                    for member in channel['members']:
                        response += f"‚Äî {member['name']} ‚Äî –≤ –∫–∞–Ω–∞–ª–µ {member['duration']}\n"
                    response += "\n"
                query.edit_message_text(text=response, parse_mode=ParseMode.MARKDOWN)

            elif query.data == 'games':
                games_info = await get_games_info(DISCORD_SERVER_ID)
                response = "**–ò–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:**\n\n"
                for game, count in games_info.items():
                    response += f"üéÆ {game}: {count} –∏–≥—Ä–æ–∫–æ–≤\n"
                query.edit_message_text(text=response, parse_mode=ParseMode.MARKDOWN)

            elif query.data == 'members':
                members_info = await get_members_info(DISCORD_SERVER_ID)
                response = "**–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:**\n\n"
                for member in members_info:
                    response += f"üë§ {member['name']} ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {member['joined_at']}\n"
                query.edit_message_text(text=response, parse_mode=ParseMode.MARKDOWN)

            elif query.data == 'notifications':
                keyboard = [
                    [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='enable_notifications')],
                    [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='disable_notifications')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=reply_markup)

            elif query.data == 'enable_notifications':
                notifications.add(query.message.chat_id)
                query.edit_message_text(text="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")

            elif query.data == 'disable_notifications':
                notifications.discard(query.message.chat_id)
                query.edit_message_text(text="‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

            elif query.data == 'profile':
                user_id = query.from_user.id
                if user_id not in linked_accounts:
                    query.edit_message_text(text="–í—ã –µ—â—ë –Ω–µ —Å–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Discord. –•–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
                    keyboard = [
                        [InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Discord", callback_data='authorize')],
                        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
                    return
                discord_user_id = linked_accounts[user_id]
                profile_info = await get_user_profile(discord_user_id, DISCORD_SERVER_ID)
                if not profile_info:
                    query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.")
                    return
                response = f"""
                **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile_info['name']}**

                - –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {profile_info['joined_at']}
                - –í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö: {profile_info['voice_hours']} —á–∞—Å–æ–≤
                - –í—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö: {profile_info['game_hours']} —á–∞—Å–æ–≤
                """
                query.edit_message_text(text=response, parse_mode=ParseMode.MARKDOWN)

            elif query.data == 'links':
                keyboard = [
                    [InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞", url="https://t.me/gamecommunityuzb")],
                    [InlineKeyboardButton("Discord —Å–µ—Ä–≤–µ—Ä", url="https://discord.gg/aqCKCXEB8V")],
                    [InlineKeyboardButton("–°–∞–π—Ç —Å–µ—Ä–≤–µ—Ä–∞", callback_data='website')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=reply_markup)

            elif query.data == 'website':
                query.edit_message_text(text="–°–∫–æ—Ä–æ...")

            elif query.data == 'authorize':
                auth_url = (
                    f"https://discord.com/api/oauth2/authorize?"
                    f"client_id={DISCORD_CLIENT_ID}&"
                    f"redirect_uri={DISCORD_REDIRECT_URI}&"
                    f"response_type=code&"
                    f"scope=identify%20guilds.join&"
                    f"state={query.from_user.id}"  # –ü–µ—Ä–µ–¥–∞—á–∞ Telegram user_id –≤ state
                )
                keyboard = [[InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=auth_url)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=reply_markup)

            elif query.data == 'cancel':
                query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                main_menu(update, context)

    asyncio.run(handle_request())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def handle_auth_code(update: Update, context: CallbackContext):
    code = update.message.text
    data = {
        "client_id": DISCORD_CLIENT_ID,
        "client_secret": DISCORD_CLIENT_SECRET,
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": DISCORD_REDIRECT_URI,
        "scope": "identify guilds.join"
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    response = requests.post("https://discord.com/api/oauth2/token", data=data, headers=headers)
    if response.status_code != 200:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    tokens = response.json()
    access_token = tokens["access_token"]
    headers = {"Authorization": f"Bearer {access_token}"}
    user_response = requests.get("https://discord.com/api/users/@me", headers=headers)
    if user_response.status_code != 200:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    user_info = user_response.json()
    discord_user_id = user_info["id"]
    telegram_user_id = update.message.from_user.id
    linked_accounts[telegram_user_id] = discord_user_id
    update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
def run_bots():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Discord-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    discord_thread = threading.Thread(target=discord_client.run, args=(DISCORD_TOKEN,))
    discord_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_click))
    dp.add_handler(
        ConversationHandler(
            entry_points=[CallbackQueryHandler(authorize, pattern='^authorize$')],
            states={
                AUTHORIZE: [MessageHandler(Filters.text & ~Filters.command, handle_auth_code)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
    )
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    run_bots()